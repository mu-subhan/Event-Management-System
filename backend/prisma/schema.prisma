// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  name            String
  email           String    @unique
  password        String
  contactNumber   String?   // Optional for both roles
  role            String      @default("volunteer") // Set the default role to VOLUNTEER
  skills          Json?     // For volunteers, null for admins
  interests       Json?     // For volunteers, null for admins
  experienceYears Int?      @default(0) // Default 0, for volunteers
  profileImage    Json?   // Optional for volunteers
  description     String?   // For volunteers, null for admins
  createdAt       DateTime  @default(now())
  updatedAt       DateTime?  @updatedAt
  events          Event[]  // A user (admin) can manage multiple events
  roles           EventRole[]   
  notification    Notification[]

}

enum Role {
  ADMIN
  VOLUNTEER
}

model Event {
  id          String       @id @default(uuid())
  adminId     Int
  title       String
  description String
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  isPass      Boolean  @default(false)
  location    String   // Optional
  status      Status    @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  admin       User      @relation(fields: [adminId], references: [id])
  role        EventRole[]
  @@map("events") 
}

enum Status {
  UPCOMING
  PENDING
  ONGOING
  COMPLETED
}

model EventRole {
  id                 String  @id @default(uuid())
  event_id           String  
  role_name          String  
  skills             String[]
  description        String? 
  volunteers         User[]
  event              Event @relation(fields: [event_id], references: [id], onDelete: Cascade)
  @@map("roles") // Mapping to the actual table name in PostgreSQL
}

model Notification {
  id            String     @id @default(uuid())
  userId        Int?  
  title         String
  message       String   
  status        NotificationStatus @default(Unread) 
  createdAt     DateTime @default(now()) 
  // Relationship
  user          User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

enum NotificationStatus {
  Unread
  Read
  Dismissed
}